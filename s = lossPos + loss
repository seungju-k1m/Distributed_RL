Help on module DDModel.Learner in DDModel:

NNAAMMEE
    DDModel.Learner - Learner module for Deep Dynamic Model

DDEESSCCRRIIPPTTIIOONN
    This module supports for training accroding to BADGR Algorithm.
    [https://arxiv.org/abs/2002.05700]
    
    Unity Environment
        Example:
            The process of sending data to Python-API is not intuitive so you might take care about it.
            I assume that you have read BADGR algorithm paper written by G.Kan.
    
            Unity Environment follows like this.
                First. Episode Begin()
                    reset the environment.
                    There are already start positions so Environment selects randomly start/target positions.
                    After Episode Begin, environment is called to send data and get action with Python-API.
                    Also, the item at first index in vector observation is 1000.
    
                Second. First Calling()
                    Since we don't have any observation, there is no event for now.
                    In this step, just send Image data. <O_t>
    
                    Course of Actions can be provided from Python-API, which is generated by Markov Gaussian Process.
                    Then, the agent follows the course.
                    Agent would take action during the time which can be specified by configuration.
                    Also observe the events which agent undergo and record them.
                    after done, Environment is again called.
    
                Third. n-Calling()
                    In this Calling, There are events which we observe, so we can push event data into Python-API.
                    send image data and event, <O_t+1>, <e_t>
                    as you know, time difference between image data and event must be considered in python-script.
    
                    To determine whether to go, detect current state collides with any obstacles.
    
                    if agent collides with any obstacles, the Episode Begin() would be called right after this calling.
                    Also, the item at last index in vector observation is 1 else 0.
    
                In summary
                    you can specify whether this calling is begin, collision and non-collision.
                    begin and collision calling play roles such as start and end.
                    In this code, I check the type of calling every step to append data with no time difference

CCLLAASSSSEESS
    DDModel.LearnerTemp.LearnerTemp(builtins.object)
        Learner
    
    class LLeeaarrnneerr(DDModel.LearnerTemp.LearnerTemp)
     |  Method resolution order:
     |      Learner
     |      DDModel.LearnerTemp.LearnerTemp
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  GGMMPP(self) -> numpy.ndarray
     |  
     |  ____iinniitt____(self, cfg)
     |      initialize for Learner
     |  
     |  ccoolllleeccttSSaammpplleess(self)
     |      Method: Collect Samples from Unity Environment
     |  
     |  rruunn(self)
     |      Method: Train the Neural Network according to the BADGR Algorithm.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ppeerrmmuutteeIImmaaggee(x:<built-in function array>)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DDModel.LearnerTemp.LearnerTemp:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

FFIILLEE
    /home/seungju/study/RL/DDModel/Learner.py

